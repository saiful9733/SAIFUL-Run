const axios = require("axios");

let simsim = "";

(async () => {
  try {
    const res = await axios.get("https://raw.githubusercontent.com/rummmmna21/rx-api/refs/heads/main/baseApiUrl.json");
    if (res.data && res.data.baby) {
      simsim = res.data.baby;
    }
  } catch {}
})();

module.exports.config = {
  name: "baby",
  version: "1.0.5",
  hasPermssion: 0,
  credits: "rX",
  description: "AI Chatbot with Teach & List support (Boxed Replies)",
  commandCategory: "chat",
  usages: "[query]",
  cooldowns: 0,
  prefix: false
};

// Helper function to create boxed message
function makeBox(senderName, replyText) {
  return `тХнтФАтФАтФАтФАтФАтФАтАвтЧИтАвтФАтФАтФАтФАтФАтФАтХо
   ЁЯМ╕ Hс┤З╩П Xс┤А╔┤, IтАЩс┤Н Rс┤Ас┤Ы╩А╔к ЁЯМ╕   

 тЭД Dс┤Зс┤А╩А, ${senderName}
 
 ЁЯТМ ${replyText}

тХ░тФАтФАтФАтФАтФАтФАтАвтЧИтАвтФАтФАтФАтФАтФАтФАтХп`;
}

module.exports.run = async function ({ api, event, args, Users }) {
  const uid = event.senderID;
  const senderName = await Users.getNameUser(uid);
  const query = args.join(" ").toLowerCase();

  try {
    if (!simsim) return api.sendMessage("тЭМ API not loaded yet.", event.threadID, event.messageID);

    // Autoteach toggle
    if (args[0] === "autoteach") {
      const mode = args[1];
      if (!["on", "off"].includes(mode)) {
        return api.sendMessage("тЬЕ Use: baby autoteach on/off", event.threadID, event.messageID);
      }
      const status = mode === "on";
      await axios.post(`${simsim}/setting`, { autoTeach: status });
      return api.sendMessage(`тЬЕ Auto teach is now ${status ? "ON ЁЯЯв" : "OFF ЁЯФ┤"}`, event.threadID, event.messageID);
    }

    // List command
    if (args[0] === "list") {
      const res = await axios.get(`${simsim}/list`);
      return api.sendMessage(
        `тХнтФАтХ╝ЁЯМЯ ЁЭРБЁЭРЪЁЭРЫЁЭР▓ ЁЭРАЁЭРИ ЁЭРТЁЭРнЁЭРЪЁЭРнЁЭРоЁЭРм\nтФЬ ЁЯУЭ ЁЭРУЁЭРЮЁЭРЪЁЭРЬЁЭРбЁЭРЮЁЭРЭ ЁЭРРЁЭРоЁЭРЮЁЭРмЁЭРнЁЭРвЁЭРиЁЭРзЁЭРм: ${res.data.totalQuestions}\nтФЬ ЁЯУж ЁЭРТЁЭРнЁЭРиЁЭРлЁЭРЮЁЭРЭ ЁЭРСЁЭРЮЁЭРйЁЭРеЁЭРвЁЭРЮЁЭРм: ${res.data.totalReplies}\nтХ░тФАтХ╝ЁЯСд ЁЭРГЁЭРЮЁЭРпЁЭРЮЁЭРеЁЭРиЁЭРйЁЭРЮЁЭРл: ЁЭРлЁЭРЧ ЁЭРАЁЭРЫЁЭРЭЁЭРоЁЭРеЁЭРеЁЭРЪЁЭРб`,
        event.threadID,
        event.messageID
      );
    }

    // Msg command
    if (args[0] === "msg") {
      const trigger = args.slice(1).join(" ").trim();
      if (!trigger) return api.sendMessage("тЭМ | Use: !baby msg [trigger]", event.threadID, event.messageID);

      const res = await axios.get(`${simsim}/simsimi-list?ask=${encodeURIComponent(trigger)}`);
      if (!res.data.replies || res.data.replies.length === 0) {
        return api.sendMessage("тЭМ No replies found.", event.threadID, event.messageID);
      }

      const formatted = res.data.replies.map((rep, i) => `тЮд ${i + 1}. ${rep}`).join("\n");
      const msg = `ЁЯУМ ЁЭЧзЁЭЧ┐ЁЭЧ╢ЁЭЧ┤ЁЭЧ┤ЁЭЧ▓ЁЭЧ┐: ${trigger.toUpperCase()}\nЁЯУЛ ЁЭЧзЁЭЧ╝ЁЭШБЁЭЧоЁЭЧ╣: ${res.data.total}\nтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\n${formatted}`;
      return api.sendMessage(msg, event.threadID, event.messageID);
    }

    // Teach command
    if (args[0] === "teach") {
      const parts = query.replace("teach ", "").split(" - ");
      if (parts.length < 2)
        return api.sendMessage("тЭМ | Use: teach [Question] - [Reply]", event.threadID, event.messageID);

      const [ask, ans] = parts;
      const res = await axios.get(`${simsim}/teach?ask=${encodeURIComponent(ask)}&ans=${encodeURIComponent(ans)}&senderID=${uid}&senderName=${encodeURIComponent(senderName)}`);
      return api.sendMessage(`тЬЕ ${res.data.message}`, event.threadID, event.messageID);
    }

    // Edit command
    if (args[0] === "edit") {
      const parts = query.replace("edit ", "").split(" - ");
      if (parts.length < 3)
        return api.sendMessage("тЭМ | Use: edit [Question] - [OldReply] - [NewReply]", event.threadID, event.messageID);

      const [ask, oldR, newR] = parts;
      const res = await axios.get(`${simsim}/edit?ask=${encodeURIComponent(ask)}&old=${encodeURIComponent(oldR)}&new=${encodeURIComponent(newR)}`);
      return api.sendMessage(res.data.message, event.threadID, event.messageID);
    }

    // Remove command
    if (["remove", "rm"].includes(args[0])) {
      const parts = query.replace(/^(remove|rm)\s*/, "").split(" - ");
      if (parts.length < 2)
        return api.sendMessage("тЭМ | Use: remove [Question] - [Reply]", event.threadID, event.messageID);

      const [ask, ans] = parts;
      const res = await axios.get(`${simsim}/delete?ask=${encodeURIComponent(ask)}&ans=${encodeURIComponent(ans)}`);
      return api.sendMessage(res.data.message, event.threadID, event.messageID);
    }

    // Normal query / empty query
    if (!query) {
      const texts = ["Hey baby ЁЯТЦ", "Yes, I'm here ЁЯШШ"];
      const randReply = texts[Math.floor(Math.random() * texts.length)];
      const message = makeBox(senderName, randReply);
      return api.sendMessage(message, event.threadID);
    }

    // AI response
    const res = await axios.get(`${simsim}/simsimi?text=${encodeURIComponent(query)}&senderName=${encodeURIComponent(senderName)}`);
    const responseText = Array.isArray(res.data.response) ? res.data.response[0] : res.data.response;
    const message = makeBox(senderName, responseText);
    return api.sendMessage(message, event.threadID, (err, info) => {
      if (!err) {
        global.client.handleReply.push({
          name: module.exports.config.name,
          messageID: info.messageID,
          author: event.senderID,
          type: "simsimi"
        });
      }
    }, event.messageID);

  } catch (e) {
    return api.sendMessage(`тЭМ Error: ${e.message}`, event.threadID, event.messageID);
  }
};

module.exports.handleReply = async function ({ api, event, Users }) {
  const senderName = await Users.getNameUser(event.senderID);
  const text = event.body?.toLowerCase();
  if (!text || !simsim) return;

  try {
    const res = await axios.get(`${simsim}/simsimi?text=${encodeURIComponent(text)}&senderName=${encodeURIComponent(senderName)}`);
    const responseText = Array.isArray(res.data.response) ? res.data.response[0] : res.data.response;
    const message = makeBox(senderName, responseText);
    return api.sendMessage(message, event.threadID, (err, info) => {
      if (!err) {
        global.client.handleReply.push({
          name: module.exports.config.name,
          messageID: info.messageID,
          author: event.senderID,
          type: "simsimi"
        });
      }
    }, event.messageID);
  } catch (e) {
    return api.sendMessage(`тЭМ Error: ${e.message}`, event.threadID, event.messageID);
  }
};

module.exports.handleEvent = async function ({ api, event, Users }) {
  const text = event.body?.toLowerCase().trim();
  if (!text || !simsim) return;

  const senderName = await Users.getNameUser(event.senderID);

  // Trigger words for casual reply
  const triggers = ["ржмрзЗржмрж┐ ", "janu", "xan", "ржмрж╛ржмрзБ", "ржЬрж╛ржи", "Baby","baby","bby","Babu"," babu];
  if (triggers.includes(text)) {
    const replies = [
      "ЁЭРАЁЭРмЁЭРмЁЭРЪЁЭРеЁЭРЪЁЭРжЁЭРо ЁЭР░ЁЭРЪЁЭРеЁЭРЪЁЭРвЁЭРдЁЭРоЁЭРж тЩе",
      "ржмрзЗрж╢рж┐ Baby Baby ржХрж░рж▓рзЗ leave ржирж┐ржмрзЛ ржХрж┐ржирзНрждрзБЁЯШТ",
    "ЁЯеЫ-ЁЯННЁЯСИ -рж▓рзЗ ржЦрж╛рж╣рзН..!ЁЯШТ",
    "рж╢рзБржиржмрзЛ ржирж╛ЁЯШ╝ рждрзБржорж┐ ржЖржорж╛ржХрзЗ ржкрзНрж░рзЗржо ржХрж░рж╛ржЗ ржжрж╛ржУ ржирж╛ржЗЁЯе║",
    "ржЖржорж┐ ржЖржмрж╛рж▓ ржжрзЗрж░ рж╕рж╛ржерзЗ ржХржерж╛ ржмрж▓рж┐ ржирж╛ЁЯШТ",
    "ржПрждрзЛ ржбрзЗржХрзЛ ржирж╛, ржкрзНрж░рзЗржорзЗ ржкрж░рзЗ ржпрж╛ржмрзЛ ЁЯЩИ",
    "-ЁЭЩВЁЭЩЦЁЭЩоЁЭЩЪЁЭЩи-ЁЯдЧ-ржпрзМржмржирзЗрж░ ржХрж╕ржо ржжрж┐ржпрж╝рзЗ ржЖржорж╛рж░рзЗ ЁЭРБЁЭРеЁЭРЪЁЭРЬЁЭРдЁЭРжЁЭРЪЁЭРвЁЭРе ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ-ЁЯе▓ЁЯджтАНтЩВя╕П",
    "ржмрж╛рж░ ржмрж╛рж░ ржбрж╛ржХрж▓рзЗ ржорж╛ржерж╛ ржЧрж░ржо рж╣ржпрж╝рзЗ ржпрж╛ржпрж╝ЁЯШС",
    "рж╣рзНржпрж╛ ржмрж▓рзЛЁЯШТ, рждрзЛржорж╛рж░ ржЬржирзНржп ржХрж┐ ржХрж░рждрзЗ ржкрж╛рж░рж┐?",
    "ржПрждрзЛ ржбрж╛ржХржЫрж┐рж╕ ржХрзЗржи? ржЧрж╛рж▓рж┐ рж╢рзБржиржмрж┐ ржирж╛ржХрж┐? ЁЯдм",
    "ржХрж┐ ржмрзЗржкрж╛рж░ ржЖржкржирж┐ рж╢рзНржмрж╢рзБрж░ ржмрж╛ржбрж╝рж┐рждрзЗ ржпрж╛ржЪрзНржЫрзЗржи ржирж╛ ржХрзЗржи-ЁЯдФЁЯе▒ЁЯМ╗",
    "Baby ржмрж▓рзЗ ржЕрж╕ржорзНржорж╛ржи ржХрж░ржЫрзЛЁЯШ┐",
    "Hop bedaЁЯШ╛, Boss ржмрж▓ BossЁЯШ╝",
    "ржЪрзБржк ржерж╛ржХ, ржирж╛ рж╣рж▓рзЗ ржжрж╛ржд ржнрзЗржЩрзЗ ржжрж┐ржмрзЛ",
    "Baby ржирж╛, ржЬрж╛ржирзБ ржмрж▓ ржЬрж╛ржирзБ ЁЯШШ",
    "ржмрж╛рж░ ржмрж╛рж░ Disturb ржХрж░рж┐рж╕ ржирж╛, ржЖржорж┐ ржмрзНржпрж╛рж╕рзНржд ржЖржЫрж┐",
    "ЁЭЧЬ ЁЭЧЯЁЭЧвЁЭЧйЁЭЧв ЁЭЧмЁЭЧвЁЭЧи-ЁЯШ╜-ржЖрж╣рж╛рж░рзЗ ржнрж╛ржмржЫрзЛ рждрзЛржорж╛рж░рзЗ ржкрзНрж░рзЛржкржЬ ржХрж░ржЫрж┐-ЁЯе┤-ржерж╛ржкрзНржкрж░ ржжрж┐ржпрж╝рж╛ ржХрж┐ржбржирзА рж▓ржХ ржХрж░рзЗ ржжрж┐ржм-ЁЯШТ-ржнрзБрж▓ ржкржбрж╝рж╛ ржмрзЗрж░ ржХрж░рзЗ ржжрж┐ржмрзЛ-ЁЯдн",
    "ржЖржорж╛ржХрзЗ ржмрзЗрж╢рж┐ ржбрж╛ржХрж┐рж╕ ржирж╛, ржорзБржбрзЗ ржирж╛ржЗЁЯШТ",
    "рж╣рзНржпрж╛ржБ ржЬрж╛ржирзБ, ржПржЗржжрж┐ржХрзЗ ржЖрж╕рзЛ ржХрж┐рж╕ ржжрзЗржЗЁЯдн",
    "ржжрзВрж░рзЗ ржпрж╛, рж╢рзБржзрзБ Baby Baby ржХрж░рж┐рж╕ ЁЯдг",
    "рждрзЛрж░ ржХржерж╛ рждрзЛрж░ ржмрж╛ржбрж╝рж┐ ржХрзЗржЙ рж╢рзБржирзЗ ржирж╛, ржЖржорж┐ ржХрзЗржи рж╢рзБржиржмрзЛ? ЁЯШВ",
    "ржЖржорж╛ржХрзЗ ржбрзЗржХрзЛ ржирж╛, ржЖржорж┐ ржмрзНржпрж╛рж╕рзНржд ржЖржЫрж┐",
    "ржмрж▓рзЛ ржХрж┐ ржмрж▓ржмрж╛, рж╕ржмрж╛рж░ рж╕рж╛ржоржирзЗ ржмрж▓ржмрж╛ ржирж╛ржХрж┐?ЁЯдн",
    "ржХрж╛рж▓ржХрзЗ ржжрзЗржЦрж╛ ржХрж░рж┐рж╕ рждрзЛ ЁЯШИ",
    "рж╣рж╛ ржмрж▓рзЛ, рж╢рзБржиржЫрж┐ ржЖржорж┐ ЁЯШП",
    "ржЖрж░ ржХржд ржмрж╛рж░ ржбрж╛ржХржмрж┐, рж╢рзБржиржЫрж┐ рждрзЛ",
    "рж╣рзБржо ржмрж▓рзЛ ржХрж┐ ржмрж▓ржмрзЗЁЯШТ",
    "ржмрж▓рзЛ ржХрж┐ ржХрж░рждрзЗ ржкрж╛рж░рж┐ рждрзЛржорж╛рж░ ржЬржирзНржп",
    "ржЖржорж┐ рждрзЛ ржЕржирзНржз, ржХрж┐ржЫрзБ ржжрзЗржЦрж┐ ржирж╛ ЁЯШО",
    "ржжрж┐ржирж╢рзЗрж╖рзЗ ржкрж░рзЗрж░ ЁЭРБЁЭРОЁЭРЦ рж╕рзБржирзНржжрж░-тШ╣я╕ПЁЯдз",
    "рждрзЛрж░ ржХрж┐ ржЪрзЛржЦрзЗ ржкржбрж╝рзЗ ржирж╛ ржЖржорж┐ ржмрзНржпрж╛рж╕рзНржд ржЖржЫрж┐ЁЯШТ",
    "рж╣рзБржо ржЬрж╛ржи, рждрзЛржорж╛рж░ ржУржЗржЦрж╛ржирзЗ ржЙржорзНржорж╛рж╣ЁЯШШ",
    "ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо, ржЖржкржирж╛рж░ ржЬржирзНржп ржХрж┐ ржХрж░рждрзЗ ржкрж╛рж░рж┐?ЁЯе░",
    "ржЖржорж╛ржХрзЗ ржПрждрзЛ ржбрж╛ржХржЫ ржХрзЗржи, ржнрж╛рж▓рзЛржмрж╛рж╕рзЛ ржирж╛ржХрж┐?ЁЯЩИ",
    "ЁЯМ╗ЁЯМ║ЁЯТЪ ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо ржУржпрж╝рж╛ рж░рж╛рж╣ржорж╛рждрзБрж▓рзНрж▓рж╛рж╣ ЁЯТЪЁЯМ║ЁЯМ╗",
    "ржЙржлржл ржмрзБржЭрж▓рж╛ржо ржирж╛ ржПрждрзЛ ржбрж╛ржХржЫрзЗржи ржХрзЗржирзЛ ЁЯШб",
    "ржЖржЬржХрзЗ ржЖржорж╛рж░ ржоржи ржнрж╛рж▓рзЛ ржирзЗржЗ, ржбрж╛ржХржмрзЗржи ржирж╛ ЁЯШк",
    "ржЗрж╕рж╕ ржПрждрзЛ ржбрж╛ржХрзЛ ржХрзЗржирзЛ, рж▓ржЬрзНржЬрж╛ рж▓рж╛ржЧрзЗ ЁЯЩИ",
    "ржнрж╛рж▓рзЛржмрж╛рж╕рж╛ ржХрж░рждрзЗ ржЪрж╛ржЗрж▓рзЗ ржЗржиржмржХрзНрж╕рзЗ ржпрж╛ржУ ЁЯМ╗",
    "ржЬрж╛ржи рждрзБржорж┐ рж╢рзБржзрзБ ржЖржорж╛рж░, ржЖржорж┐ рждрзЛржорж╛ржХрзЗ рзйрзмрзл ржжрж┐ржи ржнрж╛рж▓рзЛржмрж╛рж╕рж┐ ЁЯТЭ",
    "ржЬрж╛ржи, ржмрж╛рж▓ ржлрж╛рж▓рж╛ржЗржмрж╛ ржирж╛ ЁЯЩВЁЯе▒",
    "ржХрж┐ рж░рзЗ ржЧрзНрж░рзБржкрзЗ ржжрзЗржЦрж┐ ржПржХржЯрж╛ржУ ржмрзЗржбрж┐ ржирж╛ржЗ ЁЯдж",
    "ЁЯл╡ рждрзЛржорж╛ржХрзЗ ржкрзНрж░ржЪрзБрж░ ржнрж╛рж▓рзНрж▓рж╛ржЧрзЗ, рж╕ржоржпрж╝ ржорждрзЛ ржкрзНрж░ржкрзЛржЬ ржХрж░ржорзБ ЁЯШ╝",
    "ржжрж┐ржи ржжрж┐ржи ржХрж┐ржЫрзБ ржорж╛ржирзБрж╖рзЗрж░ ржХрж╛ржЫрзЗ ржЕржкрзНрж░рж┐ржпрж╝ рж╣ржпрж╝рзЗ ржпрж╛ржЪрзНржЫрж┐ ЁЯШ┐",
    "ржЖржорж┐ ржПржХржЯрж╛ ржжрзБржзрзЗрж░ рж╢рж┐рж╢рзБ ЁЯШЗ",
    "ржПржХржжрж┐ржи рж╕рзЗ ржарж┐ржХржЗ ржлрж┐рж░рзЗ рждрж╛ржХрж╛ржмрзЗ ржЖрж░ ржмрж▓ржмрзЗ тАУ ржУрж░ ржорждрзЛ ржХрзЗржЙ ржнрж╛рж▓ржмрж╛рж╕рзЗржирж┐ ЁЯЩВ",
    "ржЕржмрж╣рзЗрж▓рж╛ ржХрж░рж┐рж╕ ржирж╛, ржЖржорж┐ ржмржжрж▓рзЗ ржЧрзЗрж▓рзЗ ржХрж╖рзНржЯ ржкрж╛ржмрж┐ ЁЯШФ",
    "ржкрзНрж░рж┐ржпрж╝, рждрзЛржорж╛ржХрзЗ ржирж╛ ржкрзЗрж▓рзЗ ржЖржорж┐ ржЖрж░рзЗржХржЬржиржХрзЗ ржкржЯрж╛ржмрзЛ ЁЯШ╝",
    "рждрзБржорж┐ ржЬрж╛ржирзЛ? ржЖржорж┐ рж╕рж╛рж░рж╛ржжрж┐ржи рж╢рзБржзрзБ рждрзЛржорж╛рж░ ржХржерж╛ржЗ ржнрж╛ржмрж┐ЁЯТн",
    "рждрзБржорж┐ ржХржерж╛ ржирж╛ ржмрж▓рж▓рзЗ ржЖржорж╛рж░ ржоржи ржЦрж╛рж░рж╛ржк рж╣ржпрж╝рзЗ ржпрж╛ржпрж╝ЁЯШФ",
    "рждрзЛржорж╛рж░ рж╣рж╛рж╕рж┐ржЯрж╛ ржЖржЬ ржжрзЗржЦрж╛рж░ ржЦрзБржм ржЗржЪрзНржЫрзЗ ржХрж░ржЫрзЗЁЯТЦ",
    "ЁЭЧзЁЭЧ╝ЁЭЧ┐ ЁЭЧбЁЭЧоЁЭЧ╗ЁЭЧ╢ЁЭЧ┐ ЁЭЧиЁЭЧЬЁЭЧЧ ЁЭЧ▒ЁЭЧ▓ ЁЭЧЦЁЭШВЁЭШАЁЭШБЁЭЧ╝ЁЭЧ║ ЁЭЧЮЁЭЧ╡ЁЭЧ▓ЁЭЧ╣ЁЭЧ▓ ЁЭЧ▒ЁЭЧ▓ЁЭЧ╕ЁЭЧ╡ЁЭЧоЁЭШЖ ЁЭЧ▒ЁЭЧ╢ тАУ ЁЭЧФЁЭЧ║ЁЭЧ╢ ЁЭЧХЁЭЧоЁЭЧпЁЭШЖ ЁЭЧ╗ЁЭЧоЁЭЧ╕ЁЭЧ╢ ЁЭЧгЁЭЧ┐ЁЭЧ╝? ЁЯШП",
    "ржЖржЬржХрзЗ ржЦрзБржм ржПржХрж╛ рж▓рж╛ржЧржЫрзЗ, рждрзБржорж┐ ржкрж╛рж╢рзЗ ржерж╛ржХрж▓рзЗ ржнрж╛рж▓рзЛ рж╣рждрзЛЁЯе║",
    "рждрзЛржорж╛ржХрзЗ ржЫрж╛ржбрж╝рж╛ ржмрзЗржБржЪрзЗ ржерж╛ржХрж╛ ржЕрж╕ржорзНржнржм ржоржирзЗ рж╣ржпрж╝ЁЯЩИ",
    "рждрзБржорж┐ ржХрж┐ ржЬрж╛ржирзЛ? ржЖржорж┐ ржХрж┐ржирзНрждрзБ рждрзЛржорж╛ржпрж╝ Miss ржХрж░рж┐...ЁЯТМ",
    "ржЖржорж╛рж░ ржоржирзЗ рж╣ржпрж╝, рждрзБржорж┐ ржЖржорж╛рж░ ржЬржирзНржпржЗ ржкрзГржерж┐ржмрзАрждрзЗ ржЖрж╕ржЫрзЛ... ЁЯТШ"
    ];

    const randReply = replies[Math.floor(Math.random() * replies.length)];
    const message = makeBox(senderName, randReply);

    return api.sendMessage(message, event.threadID, (err, info) => {
      if (!err) {
        global.client.handleReply.push({
          name: module.exports.config.name,
          messageID: info.messageID,
          author: event.senderID,
          type: "simsimi"
        });
      }
    });
  }

  const matchPrefix = /^(bebe|janu|xan|bbz|mari|arshi)\s+/i;
  if (matchPrefix.test(text)) {
    const query = text.replace(matchPrefix, "").trim();
    if (!query) return;

    try {
      const res = await axios.get(`${simsim}/simsimi?text=${encodeURIComponent(query)}&senderName=${encodeURIComponent(senderName)}`);
      const responseText = Array.isArray(res.data.response) ? res.data.response[0] : res.data.response;
      const message = makeBox(senderName, responseText);

      return api.sendMessage(message, event.threadID, (err, info) => {
        if (!err) {
          global.client.handleReply.push({
            name: module.exports.config.name,
            messageID: info.messageID,
            author: event.senderID,
            type: "simsimi"
          });
        }
      }, event.messageID);
    } catch (e) {
      return api.sendMessage(`тЭМ Error: ${e.message}`, event.threadID, event.messageID);
    }
  }

  // Auto-teach reply
  if (event.type === "message_reply") {
    try {
      const setting = await axios.get(`${simsim}/setting`);
      if (!setting.data.autoTeach) return;

      const ask = event.messageReply.body?.toLowerCase().trim();
      const ans = event.body?.toLowerCase().trim();
      if (!ask || !ans || ask === ans) return;

      setTimeout(async () => {
        try {
          await axios.get(`${simsim}/teach?ask=${encodeURIComponent(ask)}&ans=${encodeURIComponent(ans)}&senderName=${encodeURIComponent(senderName)}`);
          console.log("тЬЕ Auto-taught:", ask, "тЖТ", ans);
        } catch (err) {
          console.error("тЭМ Auto-teach internal error:", err.message);
        }
      }, 300);
    } catch (e) {
      console.log("тЭМ Auto-teach setting error:", e.message);
    }
  }
};
